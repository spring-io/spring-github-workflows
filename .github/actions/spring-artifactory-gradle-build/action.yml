name: CI Artifactory Build for Gradle

description: 'Builds the project with Gradle and Artifactory plugin. 
If `releaseVersion` input is not provided, the SNAPSHOT is uploaded.
The buildName for build-info is based on the repository name and `releaseVersion` input if provided.
Otherwise the `github.ref_name` is used if it is not `main`.
When `github.ref_name` is `main`, the `version` is read from gradle.properties and last number is replaced with `x`.
The `ARTIFACTORY_USERNAME` and `ARTIFACTORY_PASSWORD` environment variables must be before using this action.'

inputs:
  artifactoryUrl:
    description: 'The Artifactory Server'
    required: true
  artifactoryUsername:
    description: 'The Artifactory User'
    required: true
  artifactoryPassword:
    description: 'The Artifactory Password'
    required: true
  targetRepository:
    description: 'The Artifactory Repository to upload artifacts to'
    required: true
  artifactoryProjectKey:
    description: 'The Artifactory project key'
    required: false
  gradleTasks:
    description: 'Additional Gradle tasks. The `build` and `artifactoryPublish` are included.'
    required: false
  releaseVersion:
    description: 'The optional release version. Otherwise builds SNAPSHOT'
    required: false
  gpgPrivateKey:
    description: 'A PGP/GPG signing key that will be used to sign artifacts before they are deployed'
    required: false
  gpgPassphrase:
    description: 'Passphrase of the signing key'
    required: false


outputs:
  buildName:
    description: "The name of the build for Artifactory"
    value: ${{ steps.build-name.outputs.buildName }}
  buildNumber:
    description: "The number of the build for Artifactory"
    value: ${{ steps.build-name.outputs.buildNumber }}

runs:
  using: composite
  steps:

    - name: Set up Gradle
      uses: spring-io/spring-gradle-build-action@v2
      with:
        java-version: 24

    - name: Set Release Version
      if: inputs.releaseVersion
      shell: bash
      run: |
        echo Set Release Version
        
        sed -i "s/version=.*/version=${{ inputs.releaseVersion }}/" gradle.properties

    - name: Build and Publish
      id: build-and-publish
      shell: bash
      run: |
        echo Build and Publish
        
        cp .github/spring-github-workflows/utils/*.gradle $HOME/.gradle/init.d
        
        # See utils/deployment-repository-init.gradle
        ./gradlew clean build ${{ inputs.gradleTasks }} publishAllPublicationsToDeploymentRepository
      env:
        ARTIFACTORY_USERNAME: ${{ inputs.artifactoryUsername }}
        ARTIFACTORY_PASSWORD: ${{ inputs.artifactoryPassword }}

    - name: Evaluate Build Name
      id: build-name
      shell: bash
      run: |
        echo Evaluate Build Name

        branchVersion=${{ github.ref_name }}

        if [ $branchVersion = 'main' ]; then
            snapshotVersion=$(cat gradle.properties | sed -n '/^version=/ { s/^version=//;p }')
            branchVersion=${snapshotVersion%.*}.x
        fi

        buildName=${{ github.event.repository.name }}-$branchVersion${{ inputs.releaseVersion != '' && '-release' || '' }}
        buildNumber=${{ github.run_number }}
        
        echo buildName=$buildName >> $GITHUB_OUTPUT
        echo buildNumber=$buildNumber >> $GITHUB_OUTPUT
        
        echo "::notice title=Artifactory Build Name & Number::$buildName/$buildNumber"

    - name: Deploy
      uses: spring-io/artifactory-deploy-action@v0.0.1
      with:
        uri: ${{ inputs.artifactoryUrl == '' && 'https://repo.spring.io' || inputs.artifactoryUrl }}
        project: ${{ inputs.artifactoryProjectKey }}
        username: ${{ inputs.artifactoryUsername }}
        password: ${{ inputs.artifactoryPassword }}
        build-name: ${{ steps.build-name.outputs.buildName }}
        repository: ${{ inputs.targetRepository == '' && 'libs-snapshot-local' || inputs.targetRepository }}
        folder: 'deployment-repository'
        artifact-properties: |
          /**/*.zip::zip.name=${{ github.event.repository.name }},zip.deployed=false
          /**/*docs.zip::zip.type=docs
          /**/*dist.zip::zip.type=dist
        threads: 10
        signing-key: ${{ inputs.gpgPrivateKey }}
        signing-passphrase: ${{ inputs.gpgPassphrase }}
