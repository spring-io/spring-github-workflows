name: Create GH release and Notify Slack

on:
  workflow_call:
    inputs:
      milestone:
        description: 'Milestone title, e.g 3.0.0-M1, 3.1.0-RC1, 3.2.0 etc.'
        required: true
        type: string

    secrets:
      SPRING_RELEASE_CHAT_WEBHOOK_URL:
        required: false
      GH_ACTIONS_REPO_TOKEN:
        required: true

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SPRING_MAIN_BANNERMODE: off

jobs:
  finalize-release:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_ACTIONS_REPO_TOKEN }}
          show-progress: false

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Tag Release and Next Development Version
        id: tag-release
        run: |
          if test -f pom.xml
          then
            mvn versions:set -DnewVersion=${{ inputs.milestone }} -DgenerateBackupPoms=false -DprocessAllModules=true -B -ntp
          else
            sed -i "s/version=.*/version=${{ inputs.milestone }}/" gradle.properties
          fi
          git config --global user.name 'Spring Builds'
          git config --global user.email 'builds@springframework.org'
          git commit -a -m "[artifactory-release] Release version ${{ inputs.milestone }}"
          git tag "v${{ inputs.milestone }}"
          git push --tags origin
          
          NEXT_VERSION="${{ inputs.milestone }}"
          
          if [[ "$NEXT_VERSION" == *"-"* ]] 
          then
            NEXT_VERSION=${NEXT_VERSION/-*}
          else
            MAJOR_MINOR=$(echo "$NEXT_VERSION" | cut -d '.' -f1-2)
            PATCH=$(echo "$NEXT_VERSION" | cut -d '.' -f3)
            PATCH=$((PATCH+1))
            NEXT_VERSION=$MAJOR_MINOR.$PATCH
          fi
          
          NEXT_VERSION=${NEXT_VERSION}-SNAPSHOT
          
          git pull origin ${{ github.ref }}
          
          if test -f pom.xml
          then
            mvn versions:set -DnewVersion=$NEXT_VERSION -DgenerateBackupPoms=false -DprocessAllModules=true -B -ntp
          else
            sed -i "s/version=.*/version=$NEXT_VERSION/" gradle.properties
          fi
          
          git commit -a -m "[artifactory-release] Next development version"
          git push origin
          
          echo nextVersion=$NEXT_VERSION >> $GITHUB_OUTPUT

      - name: Changelog Config File
        run: |
          repositoryTeam=$(gh api repos/$GITHUB_REPOSITORY/collaborators --jq 'map(select(.role_name == "admin") | .login) | tostring')
          repositoryTeam=$(sed 's/"//g' <<< ${repositoryTeam:1:-1})
          repositoryVisibility=$(gh repo view --json visibility --jq .[])
          repositoryVisibility=$([[ $repositoryVisibility = 'PUBLIC' ]] && echo 'true' || echo 'false')
          
          echo "changelog.contributors.exclude.names=$repositoryTeam" > changelog.properties
          echo "changelog.issues.generate-links=$repositoryVisibility" >> changelog.properties

      - name: Generate Changelog
        uses: spring-io/github-changelog-generator@v0.0.12
        with:
          milestone: ${{ inputs.milestone }}
          token: ${{ secrets.GH_ACTIONS_REPO_TOKEN }}
          config-file: changelog.properties

      - name: GitHub Release
        run: |
          RELEASE_URL=$(gh release create v${{ inputs.milestone }} -F changelog.md ${{ (contains(inputs.milestone, '-M') || contains(inputs.milestone, '-RC')) && '--prerelease' || '' }})
          echo "::notice title=Release Page::$RELEASE_URL"

      - name: Close Milestone
        run: |
          MILESTONE_ID=$(gh api repos/$GITHUB_REPOSITORY/milestones --jq '.[] | select(.title == "${{ inputs.milestone }}") | .number')
          if [ $MILESTONE_ID ]; then
            gh api -X PATCH repos/$GITHUB_REPOSITORY/milestones/$MILESTONE_ID -f state='closed' --silent
          fi

      - name: Checkout Common Repo
        uses: actions/checkout@v4
        with:
          repository: spring-io/spring-github-workflows
          path: .github/spring-github-workflows
          show-progress: false

      - name: Update Spring IO website for new version
        uses: ./.github/spring-github-workflows/.github/actions/spring-website-project-version-update
        with:
          newVersion: ${{ inputs.milestone }}
          token: ${{ secrets.GH_ACTIONS_REPO_TOKEN }}

      - name: Announce Release in Chat
        if: env.CHAT_WEBHOOK_URL
        run: |
          curl -X POST '${{ env.CHAT_WEBHOOK_URL }}' -H 'Content-Type: application/json' -d '{ text: "${{ github.event.repository.name }}-announcing `${{ inputs.milestone }}`"}'
        env:
          CHAT_WEBHOOK_URL: ${{ secrets.SPRING_RELEASE_CHAT_WEBHOOK_URL }}

#      - name: Announce Release on Slack
#        uses: slackapi/slack-github-action@v1.26.0
#        if: env.SLACK_WEBHOOK_URL
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SPRING_RELEASE_SLACK_WEBHOOK_URL }}
#          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
#        with:
#          payload: |
#            {
#              "text": "${{ github.event.repository.name }}-announcing `${{ inputs.milestone }}`"
#            }